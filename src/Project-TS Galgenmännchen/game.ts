// –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
const words = [
  "Abendbrot",
  "Brueckentag",
  "Erklaerungsnot",
  "Fingerspitzengefuehl",
  "Fremdschaemen",
  "Geborgenheit",
  "Geschmacksverirrung",
  "Schweinehund",
  "Kopfkino",
  "Kummerspeck",
  "Schnapsidee",
  "Torschlusspanik",
  "verabredet",
  "verschlimmbessern",
  "Vorfreude",
  "Weltschmerz",
  "Zeitgeist",
  "Zugzwang",
];

let selectedWord: string; // –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
let attempts: number; // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏
let guessedLetters: string[] = []; // –£–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã
let timerInterval: number | null = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
let timeLeft: number; // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
let canUseHint = true; // –†–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞

// –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
const wordDisplay = document.getElementById("wordDisplay")!;
const lettersDiv = document.getElementById("letters")!;
const messageDiv = document.getElementById("message")!;
const hintButton = document.getElementById("hintButton")!;
const startButton = document.getElementById("startButton")!;
const difficultyRadios = document.getElementsByName(
  "difficulty"
) as NodeListOf<HTMLInputElement>;
const timerDiv = document.createElement("div"); // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
timerDiv.classList.add("timer");
document.querySelector(".container")?.appendChild(timerDiv);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
function startGame() {
  guessedLetters = [];
  canUseHint = true;
  messageDiv.textContent = "";
  lettersDiv.innerHTML = "";
  timerDiv.textContent = "";
  if (timerInterval) clearInterval(timerInterval);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const difficulty =
    Array.from(difficultyRadios).find((radio) => radio.checked)?.value ||
    "easy";

  // –ó–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  switch (difficulty) {
    case "easy":
      attempts = 5;
      timeLeft = 180; // 3 –º–∏–Ω—É—Ç—ã
      break;
    case "medium":
      attempts = 3;
      timeLeft = 120; // 2 –º–∏–Ω—É—Ç—ã
      break;
    case "hard":
      attempts = 1;
      timeLeft = 60; // 1 –º–∏–Ω—É—Ç–∞
      break;
    default:
      attempts = 5;
      timeLeft = 180;
      break;
  }

  selectedWord = words[Math.floor(Math.random() * words.length)].toUpperCase();

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  messageDiv.textContent = `Attempts left: ${attempts}`;
  displayWord();
  createLetterButtons();
  startTimer();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞
function displayWord() {
  wordDisplay.textContent = selectedWord
    .split("")
    .map((letter) => (guessedLetters.includes(letter) ? letter : "_"))
    .join(" ");
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ A-Z
function createLetterButtons() {
  for (let i = 65; i <= 90; i++) {
    const letter = String.fromCharCode(i);
    const button = document.createElement("button");
    button.textContent = letter;
    button.onclick = () => handleLetterClick(letter);
    lettersDiv.appendChild(button);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –±—É–∫–≤–µ
function handleLetterClick(letter: string) {
  const buttons = lettersDiv.querySelectorAll("button");
  const button = Array.from(buttons).find((btn) => btn.textContent === letter)!;
  button.disabled = true;

  if (selectedWord.includes(letter)) {
    guessedLetters.push(letter);
    displayWord();
    checkWin();
    canUseHint = true; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
  } else {
    attempts--;
    messageDiv.textContent = `Attempts left: ${attempts}`;
    if (attempts <= 0) endGame(false);
  }
}

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏
hintButton.onclick = () => {
  if (!canUseHint) {
    messageDiv.textContent = "Guess a letter before using another hint!";
    return;
  }

  const hiddenLetters = selectedWord
    .split("")
    .filter((letter) => !guessedLetters.includes(letter));

  if (hiddenLetters.length > 0) {
    const hintLetter =
      hiddenLetters[Math.floor(Math.random() * hiddenLetters.length)];
    guessedLetters.push(hintLetter);
    displayWord();
    messageDiv.textContent = `Hint: opened letter "${hintLetter}".`;
    checkWin();
    canUseHint = false; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
  } else {
    messageDiv.textContent = "All letters are already open!";
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
  timerDiv.textContent = `Remaining Time: ${formatTime(timeLeft)}`;
  timerInterval = setInterval(() => {
    timeLeft--;
    timerDiv.textContent = `Remaining Time: ${formatTime(timeLeft)}`;
    if (timeLeft <= 0) {
      clearInterval(timerInterval!);
      endGame(false);
    }
  }, 1000);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${minutes}:${secs.toString().padStart(2, "0")}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
function checkWin() {
  const currentWord = selectedWord
    .split("")
    .map((letter) => (guessedLetters.includes(letter) ? letter : "_"))
    .join("");
  if (currentWord === selectedWord) {
    clearInterval(timerInterval!);
    endGame(true);
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame(isWin: boolean) {
  clearInterval(timerInterval!);
  messageDiv.textContent = isWin
    ? "You won! üéâüéâüéâ"
    : `Game Over. The word was: ${selectedWord}`;
  const buttons = lettersDiv.querySelectorAll("button");
  buttons.forEach((button) => (button.disabled = true));
}

// –°–æ–±—ã—Ç–∏—è
startButton.onclick = startGame;
